apiVersion: v1
kind: ConfigMap
metadata:
  name: gke-poc-config
data:
  POSTGRES_DATABASE: "postgres"
  POSTGRES_USER: "postgres"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "app"
---
apiVersion: v1
kind: Secret
metadata:
  name: gke-poc-secret
type: Opaque
data:
  postgres-password: "dGVzdA==" # test's base64 encoding
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gke-poc-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: gke-poc
  template:
    metadata:
      labels:
        app: gke-poc
    spec:
      serviceAccountName: "app"
      containers:
        - name: gke-poc
          image: leon1234858/gke-poc:latest
          ports:
            - containerPort: 80
          envFrom:
            - configMapRef:
                name: gke-poc-config
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gke-poc-secret
                  key: postgres-password
            - name: POSTGRES_HOST
              value: "127.0.0.1"
            - name: REDIS_HOST
              value: redis-service
        - name: cloud-sql-proxy
          # It is recommended to use the latest version of the Cloud SQL Auth Proxy
          image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:latest
          args:
            # If connecting from a VPC-native GKE cluster, you can use the
            # following flag to have the proxy connect over private IP
            - "--private-ip"
            # Enable structured logging with LogEntry format:
            - "--structured-logs"
            # Replace DB_PORT with the port the proxy should listen on
            - "--port=5432"
            - "tw-rd-ca-leon-lin:asia-east1:test"

          securityContext:
            # The default Cloud SQL Auth Proxy image runs as the
            # "nonroot" user and group (uid: 65532) by default.
            runAsNonRoot: true
          # You should use resource requests/limits as a best practice to prevent
          # pods from consuming too many resources and affecting the execution of
          # other pods. You should adjust the following values based on what your
          # application needs. For details, see
          # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          # resources:
            # requests:
              # The proxy's memory use scales linearly with the number of active
              # connections. Fewer open connections will use less memory. Adjust
              # this value based on your application's requirements.
              # memory: "2Gi"
              # The proxy's CPU use scales linearly with the amount of IO between
              # the database and the application. Adjust this value based on your
              # application's requirements.
              # cpu:    "1"
---
apiVersion: v1
kind: Service
metadata:
  name: gke-poc-service
spec:
  type: LoadBalancer
  selector:
    app: gke-poc
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  serviceName: "redis"
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:latest
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-storage
              mountPath: /data
  volumeClaimTemplates:
    - metadata:
        name: redis-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 500Mi
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  type: ClusterIP
  ports:
    - port: 6379
  selector:
    app: redis
